// Code generated by MockGen. DO NOT EDIT.
// Source: book.go

// Package book is a generated GoMock package.
package book

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockdbConnManager is a mock of dbConnManager interface.
type MockdbConnManager struct {
	ctrl     *gomock.Controller
	recorder *MockdbConnManagerMockRecorder
}

// MockdbConnManagerMockRecorder is the mock recorder for MockdbConnManager.
type MockdbConnManagerMockRecorder struct {
	mock *MockdbConnManager
}

// NewMockdbConnManager creates a new mock instance.
func NewMockdbConnManager(ctrl *gomock.Controller) *MockdbConnManager {
	mock := &MockdbConnManager{ctrl: ctrl}
	mock.recorder = &MockdbConnManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbConnManager) EXPECT() *MockdbConnManagerMockRecorder {
	return m.recorder
}

// Connection mocks base method.
func (m *MockdbConnManager) Connection(name string) (*sqlx.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection", name)
	ret0, _ := ret[0].(*sqlx.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connection indicates an expected call of Connection.
func (mr *MockdbConnManagerMockRecorder) Connection(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockdbConnManager)(nil).Connection), name)
}

// MockdbConnection is a mock of dbConnection interface.
type MockdbConnection struct {
	ctrl     *gomock.Controller
	recorder *MockdbConnectionMockRecorder
}

// MockdbConnectionMockRecorder is the mock recorder for MockdbConnection.
type MockdbConnectionMockRecorder struct {
	mock *MockdbConnection
}

// NewMockdbConnection creates a new mock instance.
func NewMockdbConnection(ctrl *gomock.Controller) *MockdbConnection {
	mock := &MockdbConnection{ctrl: ctrl}
	mock.recorder = &MockdbConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbConnection) EXPECT() *MockdbConnectionMockRecorder {
	return m.recorder
}

// Preparex mocks base method.
func (m *MockdbConnection) Preparex(query string) (*sqlx.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preparex", query)
	ret0, _ := ret[0].(*sqlx.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Preparex indicates an expected call of Preparex.
func (mr *MockdbConnectionMockRecorder) Preparex(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preparex", reflect.TypeOf((*MockdbConnection)(nil).Preparex), query)
}

// Rebind mocks base method.
func (m *MockdbConnection) Rebind(query string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebind", query)
	ret0, _ := ret[0].(string)
	return ret0
}

// Rebind indicates an expected call of Rebind.
func (mr *MockdbConnectionMockRecorder) Rebind(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebind", reflect.TypeOf((*MockdbConnection)(nil).Rebind), query)
}

// SelectContext mocks base method.
func (m *MockdbConnection) SelectContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockdbConnectionMockRecorder) SelectContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockdbConnection)(nil).SelectContext), varargs...)
}

// MockpreparedQueryGetter is a mock of preparedQueryGetter interface.
type MockpreparedQueryGetter struct {
	ctrl     *gomock.Controller
	recorder *MockpreparedQueryGetterMockRecorder
}

// MockpreparedQueryGetterMockRecorder is the mock recorder for MockpreparedQueryGetter.
type MockpreparedQueryGetterMockRecorder struct {
	mock *MockpreparedQueryGetter
}

// NewMockpreparedQueryGetter creates a new mock instance.
func NewMockpreparedQueryGetter(ctrl *gomock.Controller) *MockpreparedQueryGetter {
	mock := &MockpreparedQueryGetter{ctrl: ctrl}
	mock.recorder = &MockpreparedQueryGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpreparedQueryGetter) EXPECT() *MockpreparedQueryGetterMockRecorder {
	return m.recorder
}

// GetContext mocks base method.
func (m *MockpreparedQueryGetter) GetContext(ctx context.Context, dest interface{}, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockpreparedQueryGetterMockRecorder) GetContext(ctx, dest interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockpreparedQueryGetter)(nil).GetContext), varargs...)
}

// SelectContext mocks base method.
func (m *MockpreparedQueryGetter) SelectContext(ctx context.Context, dest interface{}, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockpreparedQueryGetterMockRecorder) SelectContext(ctx, dest interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockpreparedQueryGetter)(nil).SelectContext), varargs...)
}
