// Code generated by MockGen. DO NOT EDIT.
// Source: authenticate.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockauthManager is a mock of authManager interface.
type MockauthManager struct {
	ctrl     *gomock.Controller
	recorder *MockauthManagerMockRecorder
}

// MockauthManagerMockRecorder is the mock recorder for MockauthManager.
type MockauthManagerMockRecorder struct {
	mock *MockauthManager
}

// NewMockauthManager creates a new mock instance.
func NewMockauthManager(ctrl *gomock.Controller) *MockauthManager {
	mock := &MockauthManager{ctrl: ctrl}
	mock.recorder = &MockauthManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthManager) EXPECT() *MockauthManagerMockRecorder {
	return m.recorder
}

// Token mocks base method.
func (m *MockauthManager) Token(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token.
func (mr *MockauthManagerMockRecorder) Token(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockauthManager)(nil).Token), ctx, userID)
}
