// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user "github.com/rendyananta/example-online-book-store/internal/entity/user"
)

// MockuserRepo is a mock of userRepo interface.
type MockuserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepoMockRecorder
}

// MockuserRepoMockRecorder is the mock recorder for MockuserRepo.
type MockuserRepoMockRecorder struct {
	mock *MockuserRepo
}

// NewMockuserRepo creates a new mock instance.
func NewMockuserRepo(ctrl *gomock.Controller) *MockuserRepo {
	mock := &MockuserRepo{ctrl: ctrl}
	mock.recorder = &MockuserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepo) EXPECT() *MockuserRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockuserRepo) Create(ctx context.Context, param user.User) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, param)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockuserRepoMockRecorder) Create(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockuserRepo)(nil).Create), ctx, param)
}

// FindByEmail mocks base method.
func (m *MockuserRepo) FindByEmail(ctx context.Context, email string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockuserRepoMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockuserRepo)(nil).FindByEmail), ctx, email)
}
