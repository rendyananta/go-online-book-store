// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package book is a generated GoMock package.
package book

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	book "github.com/rendyananta/example-online-book-store/internal/entity/book"
)

// MockbookRepo is a mock of bookRepo interface.
type MockbookRepo struct {
	ctrl     *gomock.Controller
	recorder *MockbookRepoMockRecorder
}

// MockbookRepoMockRecorder is the mock recorder for MockbookRepo.
type MockbookRepoMockRecorder struct {
	mock *MockbookRepo
}

// NewMockbookRepo creates a new mock instance.
func NewMockbookRepo(ctrl *gomock.Controller) *MockbookRepo {
	mock := &MockbookRepo{ctrl: ctrl}
	mock.recorder = &MockbookRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbookRepo) EXPECT() *MockbookRepoMockRecorder {
	return m.recorder
}

// FindByIDs mocks base method.
func (m *MockbookRepo) FindByIDs(ctx context.Context, id []string) ([]book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", ctx, id)
	ret0, _ := ret[0].([]book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockbookRepoMockRecorder) FindByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockbookRepo)(nil).FindByIDs), ctx, id)
}

// PaginateAllBooks mocks base method.
func (m *MockbookRepo) PaginateAllBooks(ctx context.Context, param book.PaginationParam) (book.PaginationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginateAllBooks", ctx, param)
	ret0, _ := ret[0].(book.PaginationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaginateAllBooks indicates an expected call of PaginateAllBooks.
func (mr *MockbookRepoMockRecorder) PaginateAllBooks(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginateAllBooks", reflect.TypeOf((*MockbookRepo)(nil).PaginateAllBooks), ctx, param)
}

// PaginateBookSearch mocks base method.
func (m *MockbookRepo) PaginateBookSearch(ctx context.Context, searchQuery string, param book.PaginationParam) (book.PaginationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginateBookSearch", ctx, searchQuery, param)
	ret0, _ := ret[0].(book.PaginationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaginateBookSearch indicates an expected call of PaginateBookSearch.
func (mr *MockbookRepoMockRecorder) PaginateBookSearch(ctx, searchQuery, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginateBookSearch", reflect.TypeOf((*MockbookRepo)(nil).PaginateBookSearch), ctx, searchQuery, param)
}
