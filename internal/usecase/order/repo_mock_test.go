// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package order is a generated GoMock package.
package order

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	book "github.com/rendyananta/example-online-book-store/internal/entity/book"
	order "github.com/rendyananta/example-online-book-store/internal/entity/order"
)

// MockorderRepo is a mock of orderRepo interface.
type MockorderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockorderRepoMockRecorder
}

// MockorderRepoMockRecorder is the mock recorder for MockorderRepo.
type MockorderRepoMockRecorder struct {
	mock *MockorderRepo
}

// NewMockorderRepo creates a new mock instance.
func NewMockorderRepo(ctrl *gomock.Controller) *MockorderRepo {
	mock := &MockorderRepo{ctrl: ctrl}
	mock.recorder = &MockorderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderRepo) EXPECT() *MockorderRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockorderRepo) Create(ctx context.Context, param order.Main) (order.Main, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, param)
	ret0, _ := ret[0].(order.Main)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockorderRepoMockRecorder) Create(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockorderRepo)(nil).Create), ctx, param)
}

// GetDetailByID mocks base method.
func (m *MockorderRepo) GetDetailByID(ctx context.Context, orderID string) (order.Main, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailByID", ctx, orderID)
	ret0, _ := ret[0].(order.Main)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailByID indicates an expected call of GetDetailByID.
func (mr *MockorderRepoMockRecorder) GetDetailByID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailByID", reflect.TypeOf((*MockorderRepo)(nil).GetDetailByID), ctx, orderID)
}

// PaginateOrdersByUserID mocks base method.
func (m *MockorderRepo) PaginateOrdersByUserID(ctx context.Context, userID string, param order.PaginationParam) (order.PaginationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginateOrdersByUserID", ctx, userID, param)
	ret0, _ := ret[0].(order.PaginationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaginateOrdersByUserID indicates an expected call of PaginateOrdersByUserID.
func (mr *MockorderRepoMockRecorder) PaginateOrdersByUserID(ctx, userID, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginateOrdersByUserID", reflect.TypeOf((*MockorderRepo)(nil).PaginateOrdersByUserID), ctx, userID, param)
}

// MockbookRepo is a mock of bookRepo interface.
type MockbookRepo struct {
	ctrl     *gomock.Controller
	recorder *MockbookRepoMockRecorder
}

// MockbookRepoMockRecorder is the mock recorder for MockbookRepo.
type MockbookRepoMockRecorder struct {
	mock *MockbookRepo
}

// NewMockbookRepo creates a new mock instance.
func NewMockbookRepo(ctrl *gomock.Controller) *MockbookRepo {
	mock := &MockbookRepo{ctrl: ctrl}
	mock.recorder = &MockbookRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbookRepo) EXPECT() *MockbookRepoMockRecorder {
	return m.recorder
}

// FindByIDs mocks base method.
func (m *MockbookRepo) FindByIDs(ctx context.Context, id []string) ([]book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", ctx, id)
	ret0, _ := ret[0].([]book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockbookRepoMockRecorder) FindByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockbookRepo)(nil).FindByIDs), ctx, id)
}
